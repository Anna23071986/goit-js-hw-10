{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport errorIcon from '../img/bi_x-octagon.svg';\n\nconst myInput = document.querySelector('#datetime-picker');\nconst startBtn = document.querySelector('button[data-start]');\nconst timeElements = {\n  days: document.querySelector('span[data-days]'),\n  hours: document.querySelector('span[data-hours]'),\n  minutes: document.querySelector('span[data-minutes]'),\n  seconds: document.querySelector('span[data-seconds]'),\n};\n\nlet userSelectedDate;\nlet ms;\nlet timerId = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate >= new Date()) {\n      userSelectedDate = selectedDate;\n      startBtn.disabled = false;\n      clearInterval(timerId);\n    } else {\n      startBtn.disabled = true;\n      iziToast.show({\n        title: 'Error',\n        titleColor: 'rgba(255, 255, 255, 1)',\n        message: 'Please choose a date in the future',\n        backgroundColor: 'rgba(239, 64, 64, 1)',\n        iconUrl: errorIcon,\n        position: 'topRight',\n        messageColor: 'rgba(255, 255, 255, 1)',\n      });\n    }\n  },\n};\n\nflatpickr(myInput, options);\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, '0');\n}\n\nfunction updateDisplay(obj) {\n  Object.keys(obj).forEach(key => {\n    timeElements[key].textContent = addLeadingZero(obj[key]);\n  });\n}\n\nstartBtn.addEventListener('click', () => {\n  timerId = setInterval(() => {\n    ms = userSelectedDate.getTime() - Date.now();\n    const obj = convertMs(ms);\n\n    updateDisplay(obj);\n\n    if (Object.values(obj).every(value => value === 0)) {\n      clearInterval(timerId);\n    }\n  }, 1000);\n\n  startBtn.disabled = true;\n});\n"],"names":["myInput","startBtn","timeElements","userSelectedDate","ms","timerId","options","selectedDates","selectedDate","iziToast","errorIcon","flatpickr","convertMs","days","hours","minutes","seconds","addLeadingZero","value","updateDisplay","obj","key"],"mappings":"6GAMA,MAAMA,EAAU,SAAS,cAAc,kBAAkB,EACnDC,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAe,CACnB,KAAM,SAAS,cAAc,iBAAiB,EAC9C,MAAO,SAAS,cAAc,kBAAkB,EAChD,QAAS,SAAS,cAAc,oBAAoB,EACpD,QAAS,SAAS,cAAc,oBAAoB,CACtD,EAEA,IAAIC,EACAC,EACAC,EAAU,KAEd,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,GAC/BC,GAAgB,IAAI,MACtBL,EAAmBK,EACnBP,EAAS,SAAW,GACpB,cAAcI,CAAO,IAErBJ,EAAS,SAAW,GACpBQ,EAAS,KAAK,CACZ,MAAO,QACP,WAAY,yBACZ,QAAS,qCACT,gBAAiB,uBACjB,QAASC,EACT,SAAU,WACV,aAAc,wBACtB,CAAO,EAEJ,CACH,EAEAC,EAAUX,EAASM,CAAO,EAE1B,SAASM,EAAUR,EAAI,CAMrB,MAAMS,EAAO,KAAK,MAAMT,EAAK,KAAG,EAC1BU,EAAQ,KAAK,MAAOV,EAAK,MAAO,IAAI,EACpCW,EAAU,KAAK,MAAQX,EAAK,MAAO,KAAQ,GAAM,EACjDY,EAAU,KAAK,MAASZ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAS,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC,CAEA,SAASC,EAAcC,EAAK,CAC1B,OAAO,KAAKA,CAAG,EAAE,QAAQC,GAAO,CAC9BnB,EAAamB,GAAK,YAAcJ,EAAeG,EAAIC,EAAI,CAC3D,CAAG,CACH,CAEApB,EAAS,iBAAiB,QAAS,IAAM,CACvCI,EAAU,YAAY,IAAM,CAC1BD,EAAKD,EAAiB,QAAS,EAAG,KAAK,IAAG,EAC1C,MAAMiB,EAAMR,EAAUR,CAAE,EAExBe,EAAcC,CAAG,EAEb,OAAO,OAAOA,CAAG,EAAE,MAAMF,GAASA,IAAU,CAAC,GAC/C,cAAcb,CAAO,CAExB,EAAE,GAAI,EAEPJ,EAAS,SAAW,EACtB,CAAC"}